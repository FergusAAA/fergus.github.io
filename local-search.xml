<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Stow 管理.dotfiles 操作指南</title>
    <link href="/fergus.github.io/2025/07/31/CLI/Stow/"/>
    <url>/fergus.github.io/2025/07/31/CLI/Stow/</url>
    
    <content type="html"><![CDATA[<style>    html, body, .markdown-body {        font-family:"JetBrainsMono Nerd Font";        font-size: 16px;    }</style><hr><h1 id="什么是-stow"><a href="#什么是-stow" class="headerlink" title="什么是 stow"></a>什么是 stow</h1><p>stow 是一款符号链接管理工具，用于集中管理分散的配置文件（dotfiles）或软件包，通过创建指向独立存储目录的符号链接，避免文件冲突并实现一键部署与卸载</p><h1 id="为什么要用-stow-来管理-dotfiles"><a href="#为什么要用-stow-来管理-dotfiles" class="headerlink" title="为什么要用 stow 来管理 .dotfiles"></a>为什么要用 stow 来管理 .dotfiles</h1><blockquote><p>仅使用git+文件夹来管理配置文件的方式存在许多问题</p></blockquote><ol><li>手动管理混乱</li><li>家目录堆满分散的 dotfiles，易冲突、难维护。</li><li>符号链接易出错：手工创建&#x2F;删除链接易遗漏或损坏文件。</li><li>迁移部署繁琐：新环境需复制文件或重写配置，效率低。</li><li>版本控制困难</li></ol><h1 id="安装-stow"><a href="#安装-stow" class="headerlink" title="安装 stow"></a>安装 stow</h1><p>MacOS可以通过包管理器 homebrew 来安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install stow<br></code></pre></td></tr></table></figure><p>Linux 各种发行版也可以通过各自的包管理工具安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacmane -S stow<br>sudo apt install stow<br></code></pre></td></tr></table></figure><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><blockquote><p>举例:管理 zsh kitty  </p></blockquote><h3 id="建立目录"><a href="#建立目录" class="headerlink" title="建立目录"></a>建立目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p $HOME/.dotfiles<br>mkdir -p $HOME/.dotfiles/zsh<br>mkdir -p $HOME/.dotfiles/kitty<br></code></pre></td></tr></table></figure><h3 id="文件夹来管理配置文件"><a href="#文件夹来管理配置文件" class="headerlink" title="文件夹来管理配置文件"></a>文件夹来管理配置文件</h3><p>zsh 配置文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将.zshrc 移动到 .dotfiles/zsh 目录</span><br>mv $HOME/.zshrc $HOME/.dotfiles/zsh/<br></code></pre></td></tr></table></figure><p>kitty 配置文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在kitty目录下,创建对应kitty配置文件路径的目录</span><br>cd $HOME/.dotfiles/kitty<br>mkdir -p .config/kitty<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将原有的kitty配置文件移动到对应目录</span><br>mv $HOME/.config/kitty/kitty.conf $HOME/.dotfiles/kitty/.config/kitty/<br></code></pre></td></tr></table></figure><h3 id="利用-stow-创建符号链接"><a href="#利用-stow-创建符号链接" class="headerlink" title="利用 stow 创建符号链接"></a>利用 stow 创建符号链接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">为所有管理的配置文件建立符号链接</span><br>stow -v -t ~ */<br></code></pre></td></tr></table></figure><p>如果只想为某个配置文件建立符号链接，可以指定目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">指定目录为 zsh</span><br>stow -v -t ~ zsh<br></code></pre></td></tr></table></figure><h3 id="纳入版本控制"><a href="#纳入版本控制" class="headerlink" title="纳入版本控制"></a>纳入版本控制</h3><blockquote><p>一个好的实践是将 .dotfiles 目录纳入版本控制，这样可以轻松管理和迁移配置文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd $HOME/.dotfiles<br>git init<br>git add .<br>git commit -m &quot;Initial commit of dotfiles&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
      <category>Linux</category>
      
      <category>CLI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>技术文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim奇技淫巧(实用快捷键)</title>
    <link href="/fergus.github.io/2024/08/08/CLI/Vim/"/>
    <url>/fergus.github.io/2024/08/08/CLI/Vim/</url>
    
    <content type="html"><![CDATA[<style>    html, body, .markdown-body {        font-family:"JetBrainsMono Nerd Font";        font-size: 16px;    }</style><h1 id="Vim奇技淫巧（实用快捷键）"><a href="#Vim奇技淫巧（实用快捷键）" class="headerlink" title="Vim奇技淫巧（实用快捷键）"></a>Vim奇技淫巧（实用快捷键）</h1><blockquote><p>本文适合对Vim有一定认知的，对Vim快捷键有基础了解的同学观看。<br>笔者主要记录一些平时自己的学习心得，以及一些可能用不到，但是用到的时候真的很cool的技巧。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>c       按下c键<br>cv      依次按下<code>c v</code>键<br>&lt;C-a&gt;   同时按下<code>Ctrl a</code>键<br>g&lt;C-)&gt;  按下<code>g</code>键后再同时按下<code>Ctrl )</code>键<br>&lt;C-w&gt;h  同时按下<code>Ctrl w</code>键后再按下<code>h</code>键<br>所有快捷键都按以上逻辑表达</p><hr><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><blockquote><p>简单介绍一下Vim的基础操作逻辑。</p></blockquote><ol><li>Vim有<code>正常模式</code>(Normal-mode)，<code>插入模式</code>(Insert-mode)，<code>命令模式</code>(Command-mode)，<code>可视模式</code>(Visual-mode)。可以在Normal-mode中进入其他不同的模式，如使用<code>i</code>进入插入模式，使用<code>v</code>进入Visual-mode，使用<code>:</code>进入Command-mode。</li><li>可以使用<code>hjkl</code>，进行上下左右移动</li><li>Normal-mode下输入<code>:q</code>(退出) 或 <code>:wq</code>(保存退出)</li><li>Normal-mode下快捷键基础操作逻辑：操作符-修饰符-对象，例如：<code>daw</code>(删除-一个-单词)</li></ol><h2 id="选中文本"><a href="#选中文本" class="headerlink" title="选中文本"></a>选中文本</h2><h3 id="选中"><a href="#选中" class="headerlink" title="选中"></a>选中</h3><ul><li><p>基础版本：veeee &#x2F; vwwww<br><img src="https://raw.githubusercontent.com/FergusAAA/blog-img/main/20240810_131800.gif" alt="gif"></p></li><li><p>中级版本(使用修饰符+对象)</p><ul><li>vt( : 从当前位置选中到下一个<code>(</code>的位置<br>  <img src="https://raw.githubusercontent.com/FergusAAA/blog-img/main/20240810_140149.gif" alt="gif"></li><li>va( &#x2F; vi( &#x2F; va{ &#x2F; vi{ : 选中当前括号(花括号)的内容,<code>i</code>(Inside)不包含 <code>a</code>包含<br>  <img src="https://raw.githubusercontent.com/FergusAAA/blog-img/main/20240810_141011.gif" alt="git"></li></ul></li><li><p>高级版本(实际上很少用)</p><ul><li>v&#x2F; (c也可以使用当前技巧,且更加合适)<br>  <img src="https://raw.githubusercontent.com/FergusAAA/blog-img/main/20240810_153453.gif" alt="gif"></li></ul></li></ul><h3 id="全选"><a href="#全选" class="headerlink" title="全选"></a>全选</h3><ul><li>ggVG: gg(跳转到首行) V(选中当前行) G(跳转到尾)</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
      <category>Linux</category>
      
      <category>CLI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>技术文章</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Repo使用</title>
    <link href="/fergus.github.io/2024/03/28/Android/Repo/"/>
    <url>/fergus.github.io/2024/03/28/Android/Repo/</url>
    
    <content type="html"><![CDATA[<style>    html, body, .markdown-body {        font-family:"JetBrainsMono Nerd Font";        font-size: 16px;    }</style><h1 id="repo-工作原理"><a href="#repo-工作原理" class="headerlink" title="repo 工作原理"></a>repo 工作原理</h1><blockquote><p>通过一个git库来管理项目的清单文件，这个git仓库的名字叫<code>manifests</code>。在客户端使用repo初始化一个项目的时候,就会从远程把<code>manifests</code>git仓库拷贝到本地。</p></blockquote><h2 id="项目清单库-repo-manifests"><a href="#项目清单库-repo-manifests" class="headerlink" title="项目清单库(.repo&#x2F;manifests)"></a>项目清单库(.repo&#x2F;manifests)</h2><p><a href="https://android.googlesource.com/platform/manifest">AOSP的default.xml</a>的文件内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">remote</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aosp&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">fetch</span>=<span class="hljs-string">&quot;..&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">review</span>=<span class="hljs-string">&quot;https://android-review.googlesource.com/&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">default</span> <span class="hljs-attr">revision</span>=<span class="hljs-string">&quot;master&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">remote</span>=<span class="hljs-string">&quot;aosp&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">sync-j</span>=<span class="hljs-string">&quot;4&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;build&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;platform/build&quot;</span> <span class="hljs-attr">groups</span>=<span class="hljs-string">&quot;pdk,tradefed&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">copyfile</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;core/root.mk&quot;</span> <span class="hljs-attr">dest</span>=<span class="hljs-string">&quot;Makefile&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;abi/cpp&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;platform/abi/cpp&quot;</span> <span class="hljs-attr">groups</span>=<span class="hljs-string">&quot;pdk&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;art&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;platform/art&quot;</span> <span class="hljs-attr">groups</span>=<span class="hljs-string">&quot;pdk&quot;</span> /&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;tools/studio/translation&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;platform/tools/studio/translation&quot;</span> <span class="hljs-attr">groups</span>=<span class="hljs-string">&quot;notdefault,tools&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;tools/swt&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;platform/tools/swt&quot;</span> <span class="hljs-attr">groups</span>=<span class="hljs-string">&quot;notdefault,tools&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>&lt;remote&gt;：描述了远程仓库的基本信息。name描述的是一个远程仓库的名称，通常我们看到的命名是origin;fetch用作项目名称的前缘，在构造项目仓库远程地址时使用到;review描述的是用作code review的server地址</p></li><li><p>&lt;default&gt;：default标签的定义的属性，将作为<project>标签的默认属性，在<project>标签中，也可以重写这些属性。属性revision表示当前的版本，也就是我们俗称的分支;属性remote描述的是默认使用的远程仓库名称，即<remote>标签中name的属性值;属性sync-j表示在同步远程代码时，并发的任务数量，配置高的机器可以将这个值调大</p></li><li><p>&lt;project&gt;：每一个repo管理的git库，就是对应到一个<project>标签，path描述的是项目相对于远程仓库URL的路径，同时将作为对应的git库在本地代码的路径; name用于定义项目名称，命名方式采用的是整个项目URL的相对地址。 譬如，AOSP项目的URL为<a href="https://android.googlesource.com/%EF%BC%8C%E5%91%BD%E5%90%8D%E4%B8%BAplatform/build%E7%9A%84git%E5%BA%93%EF%BC%8C%E8%AE%BF%E9%97%AE%E7%9A%84URL%E5%B0%B1%E6%98%AFhttps://android.googlesource.com/platform/build">https://android.googlesource.com/，命名为platform/build的git库，访问的URL就是https://android.googlesource.com/platform/build</a></p></li></ul><h1 id="创建清单库-–-repo-init"><a href="#创建清单库-–-repo-init" class="headerlink" title="创建清单库 – repo init"></a>创建清单库 – repo init</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">repo init -u &lt;URL&gt; [&lt;OPTIONS&gt;]<br></code></pre></td></tr></table></figure><ul><li>-u: 指定 <code>manifests</code> 清单库的URL</li><li>-m, -manifest-name: 指定清单文件（默认会时候 <code>default.xml</code> )</li><li>-b, -manifest-branch: 指定清单库的分支</li></ul><h1 id="同步代码-–-repo-sync"><a href="#同步代码-–-repo-sync" class="headerlink" title="同步代码 – repo sync"></a>同步代码 – repo sync</h1><blockquote><p>同步所有仓库,可以指定project</p></blockquote><h2 id="repo-sync的参数"><a href="#repo-sync的参数" class="headerlink" title="repo sync的参数"></a>repo sync的参数</h2><ul><li>-j : 可以指定线程数</li><li>-c : <code>-current-branch</code> 只同步指定的远程分支。默认情况下,<code>sync</code>会同步所有的远程分支,当远程分支比较多的时候,下载代码量大。使用该参数,缩减下载时间。</li><li>-d : <code>-detach</code> 脱离当前的分支,将<code>HEAD</code>强制切换到<code>manifest.xml</code>中设定的分支,忽略本地的改动且不会覆盖掉本地的改动。</li><li>-f : <code>-force-broken</code> 当有git仓库sync失败了,不中断整个同步操作,继续同步其他的git库。</li></ul><h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><blockquote><p>在当前清单库分支的基础上创建分支，并切到对应分支。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">repo start dev --all<br></code></pre></td></tr></table></figure><p><code>repo start</code> 本质上是对 <code>git checkout -b</code> 命令的封装。但是和git命令仍然有所不同，区别在与：</p><ul><li>repo start: 在清单文件分支的基础上创建分支，即使本地某些仓库分支切到单独分支也不影响</li><li>git checkout -b: 在本地文件分支的基础上创建分支</li></ul><h1 id="forall"><a href="#forall" class="headerlink" title="forall"></a>forall</h1><blockquote><p>对 全部 或 指定的 project 执行命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">repo forall [PROJECT_LIST] -c &lt;COMMAND&gt;<br></code></pre></td></tr></table></figure><p><code>project</code> 之间用空格隔开，例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">repo forall frameworks/base frameworks/av -c &quot;git status&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机科学</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>技术文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
